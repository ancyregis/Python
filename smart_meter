class BankAccount:
    total_accounts = 0

    def __init__(self, account_holder, account_type, initial_balance=0):
        if not account_holder:
            raise ValueError("Account holder name cannot be empty")
        if initial_balance < 0:
            raise ValueError("Initial balance cannot be negative")
        
        self.account_holder = account_holder
        self.account_type = account_type
        self.balance = initial_balance
        self.transactions = []
        
        BankAccount.total_accounts += 1
        self.transactions.append(("Account Opened", initial_balance))
        print(f"New {account_type} account created for {account_holder}.")

    def deposit(self, amount):
        if not self.validate_amount(amount):
            raise ValueError("Invalid deposit amount")
        
        self.balance += amount
        self.transactions.append(("Deposit", amount))

    def withdraw(self, amount):
        if not self.validate_amount(amount):
            raise ValueError("Invalid withdrawal amount")
        if self.balance - (amount + 10) < 0:
            raise ValueError("Insufficient funds")
        
        self.balance -= (amount + 10)
        self.transactions.append(("Withdrawal", -amount))

    def transfer(self, recipient, amount):
        if not isinstance(recipient, BankAccount):
            raise ValueError("Invalid recipient account")
        if not self.validate_amount(amount):
            raise ValueError("Invalid transfer amount")
        if self.balance - amount < 0:
            raise ValueError("Insufficient funds")

        self.balance -= amount
        recipient.balance += amount
        self.transactions.append((f"Transfer to {recipient.account_holder}", -amount))
        recipient.transactions.append((f"Transfer from {self.account_holder}", amount))

    def check_balance(self):
        return self.balance

    def get_transaction_history(self):
        return self.transactions

    @classmethod
    def total_bank_accounts(cls):
        return cls.total_accounts

    @staticmethod
    def validate_amount(amount):
        return isinstance(amount, (int, float)) and 0 < amount <= 50000

class SavingsAccount(BankAccount):
    INTEREST_RATE = 0.05
    MIN_BALANCE = 1000
    
    def __init__(self, account_holder, initial_balance=0):
        if initial_balance < self.MIN_BALANCE:
            raise ValueError("Initial balance must be at least â‚¹1000 for Savings Account")
        super().__init__(account_holder, "Savings", initial_balance)
    
    def apply_interest(self):
        interest = self.balance * self.INTEREST_RATE
        self.balance += interest
        self.transactions.append(("Interest Applied", interest))

class CurrentAccount(BankAccount):
    def __init__(self, account_holder, initial_balance=0):
        super().__init__(account_holder, "Current", initial_balance)

