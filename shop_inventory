import csv
from tabulate import tabulate

class Product:
    def __init__(self, product_id, name, price, quantity):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.quantity = quantity

    def update_quantity(self, amount):
        self.quantity += amount

class Inventory:
    def __init__(self, filename="inventory.csv"):
        self.filename = filename
        self.products = self.load_inventory()

    def load_inventory(self):
        products = {}
        try:
            with open(self.filename, newline='', encoding='utf-8') as file:
                reader = csv.reader(file)
                next(reader)  # Skip header
                for row in reader:
                    product_id, name, price, quantity = row
                    products[product_id] = Product(product_id, name, float(price), int(quantity))
        except FileNotFoundError:
            pass
        return products

    def save_inventory(self):
        with open(self.filename, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["product_id", "product_name", "price", "quantity"])
            for product in self.products.values():
                writer.writerow([product.product_id, product.name, product.price, product.quantity])

    def add_product(self, product_id, name, price, quantity):
        if product_id in self.products:
            print("Product ID already exists!")
        else:
            self.products[product_id] = Product(product_id, name, price, quantity)
            self.save_inventory()
            print("Product added successfully!")

    def update_product_quantity(self, product_id, quantity):
        if product_id in self.products:
            self.products[product_id].update_quantity(quantity)
            self.save_inventory()
        else:
            print("Product not found!")

    def display_inventory(self):
        table = [[p.product_id, p.name, p.price, p.quantity] for p in self.products.values()]
        print(tabulate(table, headers=["Product ID", "Name", "Price", "Quantity"], tablefmt="grid"))

class Sale:
    def __init__(self, sale_id):
        self.sale_id = sale_id
        self.items = []

    def add_item(self, product, quantity):
        total_price = product.price * quantity
        self.items.append([self.sale_id, product.product_id, product.name, quantity, total_price])
        product.update_quantity(-quantity)
        return total_price

class SalesManager:
    def __init__(self, inventory, filename="sales.csv"):
        self.filename = filename
        self.inventory = inventory
        self.sales = self.load_sales()

    def load_sales(self):
        sales = []
        try:
            with open(self.filename, newline='', encoding='utf-8') as file:
                reader = csv.reader(file)
                next(reader)  # Skip header
                for row in reader:
                    sales.append(row)
        except FileNotFoundError:
            pass
        return sales

    def save_sales(self):
        with open(self.filename, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["sale_id", "product_id", "product_name", "quantity_sold", "total_price"])
            writer.writerows(self.sales)

    def record_sale(self, sale):
        self.sales.extend(sale.items)
        self.save_sales()
        self.inventory.save_inventory()
        print("Sale recorded successfully!")

    def display_sales(self):
        print(tabulate(self.sales, headers=["Sale ID", "Product ID", "Product Name", "Quantity Sold", "Total Price"], tablefmt="grid"))

class ShopSystem:
    def __init__(self):
        self.inventory = Inventory()
        self.sales_manager = SalesManager(self.inventory)

    def menu(self):
        while True:
            print("\n--- Small Shop Management System ---")
            print("1. View Inventory")
            print("2. Add Product to Inventory")
            print("3. Process a Sale")
            print("4. View Sales Report")
            print("5. Exit")
            choice = input("Enter your choice: ")
            
            if choice == "1":
                self.inventory.display_inventory()
            elif choice == "2":
                product_id = input("Enter Product ID: ")
                name = input("Enter Product Name: ")
                price = float(input("Enter Price: "))
                quantity = int(input("Enter Quantity: "))
                self.inventory.add_product(product_id, name, price, quantity)
            elif choice == "3":
                sale_id = input("Enter Sale ID: ")
                sale = Sale(sale_id)
                while True:
                    product_id = input("Enter Product ID to sell (or 'done' to finish): ")
                    if product_id.lower() == 'done':
                        break
                    if product_id in self.inventory.products:
                        quantity = int(input(f"Enter quantity for {self.inventory.products[product_id].name}: "))
                        if quantity > self.inventory.products[product_id].quantity:
                            print("Insufficient stock!")
                        else:
                            sale.add_item(self.inventory.products[product_id], quantity)
                    else:
                        print("Product not found!")
                self.sales_manager.record_sale(sale)
            elif choice == "4":
                self.sales_manager.display_sales()
            elif choice == "5":
                print("Exiting... Thank you!")
                break
            else:
                print("Invalid choice! Please enter a valid option.")

if __name__ == "__main__":
    shop = ShopSystem()
    shop.menu()

